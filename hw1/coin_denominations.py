# -*- coding: utf-8 -*-
"""coin_denominations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wxx7KDyCrA6WyZM3nEJ6wsfYFvc4BSHH
"""

import numpy as np
import matplotlib.pyplot as plt

"""###Coin denominations"""

def count(S, m, n ): 
  
    # handling the extreme cases of n <= 0 or if there are no coins
    if (n == 0): 
        return 1
  
    if (n < 0): 
        return 0; 
  
    if (m <=0 and n >= 1): 
        return 0
  
    #split into combinations that use the denomination Sm and those that do not
    return count( S, m - 1, n ) + count( S, m, n-S[m-1] );

a = count([1,5,10,25],4,213)
a

a = count([1,5,10,25],4,213)
b = count([1,5,10],3,213)
(b/a)*100

ways_1 = []
ways_2 = []
for N in range(400):
  ways_1.append(count([1,5,10,25],4,N))
  ways_2.append(count([1,5,10],3,N))

fig, ax1 = plt.subplots()

color = 'tab:red'
ax1.set_xlabel('N')
ax1.set_ylabel('Total number of ways to "build" N cents', color=color)
ax1.plot(ways_1, color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:green'
ax2.set_ylabel('Fraction containing only 1,5,10 denominations', color=color)  # we already handled the x-label with ax1
ax2.plot(np.array(ways_2)/np.array(ways_1), color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped
plt.show()

plt.plot(ways_1)
plt.plot(np.array(ways_2)/np.array(ways_1))
plt.show()

plt.plot(np.array(ways_2)/np.array(ways_1))